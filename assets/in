#!/bin/bash
# vim: set ft=sh

#The in-script recieves a new version from consource which is output from the check script
#Then this script will clone the repository and checkout the branch on which that new version is present.
#The cloned repo will be stored in the location concourse provides.
#Bitbucket will be updated so that the current PR shows INPROGRESS state.
#Furthermore the version and metadata returned.

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

echo "Running in script"

source $(dirname $0)/common.sh

#Destination is given by concourse and is the place where the branch needs to be stored for testing
destination=$1

if [ -z "$destination" ]; then #Might not be needed, came for the original script
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

#Loads inputs for in script
payload=$(mktemp $TMPDIR/git-resource-request.XXXXXX)

cat > $payload <&0

load_pubkey $payload
load_git_crypt_key $payload
configure_https_tunnel $payload
configure_git_ssl_verification $payload
configure_credentials $payload

concourse_url=$(jq -r '.source.concourse_url // ""' < $payload)
bitbucket_key=$(jq -r '.source.bitbucket_key // ""' < $payload)
bitbucket_secret=$(jq -r '.source.bitbucket_secret // ""' < $payload)
bitbucket_host=$(jq -r '.source.bitbucket_host // ""' < $payload)
bitbucket_api_version=$(jq -r '.source.bitbucket_api_version // ""' < $payload)
bitbucket_team_name=$(jq -r '.source.bitbucket_team_name // ""' < $payload)
bitbucket_repo_name=$(jq -r '.source.bitbucket_repo_name // ""' < $payload)
uri=$(jq -r '.source.uri // ""' < $payload)
git_config_payload=$(jq -r '.source.git_config // []' < $payload)
ref=$(jq -r '.version.ref // "HEAD"' < $payload)
commit_verification_key_ids=$(jq -r '(.source.commit_verification_key_ids // [])[]' < $payload)
commit_verification_keys=$(jq -r '(.source.commit_verification_keys // [])[]' < $payload)
gpg_keyserver=$(jq -r '.source.gpg_keyserver // "hkp://ipv4.pool.sks-keyservers.net/"' < $payload)
short_ref_format=$(jq -r '(.params.short_ref_format // "%s")' < $payload)

configure_git_global "${git_config_payload}"

if [ -z "$uri" ]; then
  echo "invalid payload (missing uri):" >&2
  cat $payload >&2
  exit 1
fi

#Clone complete repo and cd into it
git clone $uri $destination
cd $destination

#Important
#Checkout the version that concourse specified (which is a version specified by the output of the check script)
git checkout -q $ref

invalid_key() {
  echo "Invalid GPG key in: ${commit_verification_keys}"
  exit 2
}

commit_not_signed() {
  commit_id=$(git rev-parse ${ref})
  echo "The commit ${commit_id} is not signed"
  exit 1
}

#Update Bitbucket to put the build for the branch for this PR into INPROGRESS state
#Get access token
ACCESS_TOKEN=`curl -X POST -u "${bitbucket_key}:${bitbucket_secret}" https://bitbucket.org/site/oauth2/access_token \
-d grant_type=client_credentials -k | jq '.access_token'`

#Post status to bitbucket including state, build key and url of the building pipeline
BUILD_URL="${concourse_url}/teams/${BUILD_TEAM_NAME}/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"
BUILD_STATUS='{"state":"INPROGRESS","key":"concourse-'${BUILD_JOB_NAME}'", "url":"'${BUILD_URL}'"}'
BITBUCKET_BUILD_URL="${bitbucket_host}/${bitbucket_api_version}/repositories/${bitbucket_team_name}/${bitbucket_repo_name}/commit/${ref}/statuses/build"

echo "$BITBUCKET_BUILD_URL"

curl -X POST ${BITBUCKET_BUILD_URL} \
--header "Content-Type: application/json" \
--header "Authorization: Bearer ${ACCESS_TOKEN}" \
--data "${BUILD_STATUS}" \
-k

#If ref is not the last commit take the last commit
if [ "$ref" == "HEAD" ]; then
  return_ref=$(git rev-parse HEAD)
else
  return_ref=$ref
fi

#Store metadata in files to be used in concourse UI
git --no-pager log -1 --pretty=format:"%ae" > .git/committer
echo "${return_ref}" > .git/ref
echo "${return_ref}" | cut -c1-7 | awk "{ printf \"${short_ref_format}\", \$1 }" > .git/short_ref
git log -1 --format=format:%B > .git/commit_message
metadata=$(git_metadata)

#Log and return the output in proper format to stdout
echo "in-output: "$(jq -n "{
  version: {ref: $(echo $return_ref | jq -R .)},
  metadata: $metadata
}")

jq -n "{
  version: {ref: $(echo $return_ref | jq -R .)},
  metadata: $metadata
}" >&3
