#!/bin/bash
# vim: set ft=sh

#The in-script recieves a new version from consource which is output from the check script
#Then this script will clone the repository and checkout the branch on which that new version is present.
#The cloned repo will be stored in the location concourse provides.
#Bitbucket will be updated so that the current PR shows INPROGRESS state.
#Furthermore the version and metadata returned.

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

echo "Running in script"

source $(dirname $0)/common.sh

#Destination is given by concourse and is the place where the branch needs to be stored for testing
destination=$1

if [ -z "$destination" ]; then #Might not be needed, came for the original script
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

#Loads inputs for in script
payload=$(mktemp $TMPDIR/git-resource-request.XXXXXX)

cat > $payload <&0

load_pubkey $payload
load_git_crypt_key $payload
configure_https_tunnel $payload
configure_git_ssl_verification $payload
configure_credentials $payload

concourse_url=$(jq -r '.source.concourse_url // ""' < $payload)
bitbucket_key=$(jq -r '.source.bitbucket_key // ""' < $payload)
bitbucket_secret=$(jq -r '.source.bitbucket_secret // ""' < $payload)
bitbucket_host=$(jq -r '.source.bitbucket_host // ""' < $payload)
bitbucket_api_version=$(jq -r '.source.bitbucket_api_version // ""' < $payload)
bitbucket_team_name=$(jq -r '.source.bitbucket_team_name // ""' < $payload)
bitbucket_repo_name=$(jq -r '.source.bitbucket_repo_name // ""' < $payload)
uri=$(jq -r '.source.uri // ""' < $payload)
git_config_payload=$(jq -r '.source.git_config // []' < $payload)
ref=$(jq -r '.version.ref // "HEAD"' < $payload)
depth=$(jq -r '(.params.depth // 0)' < $payload)
fetch=$(jq -r '(.params.fetch // [])[]' < $payload)
submodules=$(jq -r '(.params.submodules // "all")' < $payload)
submodule_recursive=$(jq -r '(.params.submodule_recursive // true)' < $payload)
submodule_remote=$(jq -r '(.params.submodule_remote // false)' < $payload)
commit_verification_key_ids=$(jq -r '(.source.commit_verification_key_ids // [])[]' < $payload)
commit_verification_keys=$(jq -r '(.source.commit_verification_keys // [])[]' < $payload)
gpg_keyserver=$(jq -r '.source.gpg_keyserver // "hkp://ipv4.pool.sks-keyservers.net/"' < $payload)
disable_git_lfs=$(jq -r '(.params.disable_git_lfs // false)' < $payload)
clean_tags=$(jq -r '(.params.clean_tags // false)' < $payload)
short_ref_format=$(jq -r '(.params.short_ref_format // "%s")' < $payload)

configure_git_global "${git_config_payload}"

if [ -z "$uri" ]; then
  echo "invalid payload (missing uri):" >&2
  cat $payload >&2
  exit 1
fi

#Clone complete repo and cd into it
git clone $depthflag $uri $destination

cd $destination

git fetch origin refs/notes/*:refs/notes/*

# A shallow clone may not contain the Git commit $ref:
# 1. The depth of the shallow clone is measured backwards from the latest
#    commit on the given head (master or branch), and in the meantime there may
#    have been more than $depth commits pushed on top of our $ref.
# 2. If there's a path filter (`paths`/`ignore_paths`), then there may be more
#    than $depth such commits pushed to the head (master or branch) on top of
#    $ref that are not affecting the filtered paths.
#
# In either case we try to deepen the shallow clone until we find $ref, reach
# the max depth of the repo, or give up after a given depth and resort to deep
# clone.

#It is possible that not the whole repo is cloned but only till a certain depth
if [ "$depth" -gt 0 ]; then #Currently this is not taken advantage of but might be used for optimization later
  readonly max_depth=128

  d="$depth"
  while ! git checkout -q $ref &>/dev/null; do
    # once the depth of a shallow clone reaches the max depth of the origin
    # repo, Git silenty turns it into a deep clone
    if [ ! -e .git/shallow ]; then
      echo "Reached max depth of the origin repo while deepening the shallow clone, it's a deep clone now"
      break
    fi

    echo "Could not find ref ${ref} in a shallow clone of depth ${d}"

    (( d *= 2 ))

    if [ "$d" -gt $max_depth ]; then
      echo "Reached depth threshold ${max_depth}, falling back to deep clone..."
      git fetch --unshallow origin

      break
    fi

    echo "Deepening the shallow clone to depth ${d}..."
    git fetch --depth $d origin
  done
fi

#Important
#Checkout the version that concourse specified (which is a version specified by the output of the check script)
git checkout -q $ref

invalid_key() {
  echo "Invalid GPG key in: ${commit_verification_keys}"
  exit 2
}

commit_not_signed() {
  commit_id=$(git rev-parse ${ref})
  echo "The commit ${commit_id} is not signed"
  exit 1
}

#Update Bitbucket to put the build for the branch for this PR into INPROGRESS state
#Get access token
ACCESS_TOKEN=`curl -X POST -u "${bitbucket_key}:${bitbucket_secret}" https://bitbucket.org/site/oauth2/access_token \
-d grant_type=client_credentials -k | jq '.access_token'`

#Post status to bitbucket including state, build key and url of the building pipeline
BUILD_URL="${concourse_url}/teams/${BUILD_TEAM_NAME}/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"
BUILD_STATUS='{"state":"INPROGRESS","key":"concourse-'${BUILD_JOB_NAME}'", "url":"'${BUILD_URL}'"}'
BITBUCKET_BUILD_URL="${bitbucket_host}/${bitbucket_api_version}/repositories/${bitbucket_team_name}/${bitbucket_repo_name}/commit/${ref}/statuses/build"

echo "$BITBUCKET_BUILD_URL"

curl -X POST ${BITBUCKET_BUILD_URL} \
--header "Content-Type: application/json" \
--header "Authorization: Bearer ${ACCESS_TOKEN}" \
--data "${BUILD_STATUS}" \
-k

#There is a possibility for commit signing
if [ ! -z "${commit_verification_keys}" ] || [ ! -z "${commit_verification_key_ids}" ] ; then #Currently not taken into account
  if [ ! -z "${commit_verification_keys}" ]; then
    echo "${commit_verification_keys}" | gpg --batch --import || invalid_key "${commit_verification_keys}"
  fi
  if [ ! -z "${commit_verification_key_ids}" ]; then
    echo "${commit_verification_key_ids}" | \
      xargs --no-run-if-empty -n1 gpg --batch --keyserver $gpg_keyserver --recv-keys
  fi
  git verify-commit $(git rev-list -n 1 $ref) || commit_not_signed
fi

#Possibility for using git large file storage
if [ "$disable_git_lfs" != "true" ]; then #Currently not taken into account
  git lfs fetch
  git lfs checkout
fi

#Make sure that we have a clean checkcout of the branch
git log -1 --oneline #Unclear why this is needed
git clean --force --force -d
git submodule sync

#Possibility for encrypting/decrypting git repos
if [ -f $GIT_CRYPT_KEY_PATH ]; then #Currently not taken into account
  echo "unlocking git repo"
  git-crypt unlock $GIT_CRYPT_KEY_PATH
fi

#Possibility to only fetch submodules instead of the whole repo
submodule_parameters=""#Currently not used but might be useful for optimization.
if [ "$submodule_remote" != "false" ]; then
    submodule_parameters+=" --remote "
fi
if [ "$submodule_recursive" != "false" ]; then
    submodule_parameters+=" --recursive "
fi

if [ "$submodules" == "all" ]; then
  git submodule update --init  $depthflag $submodule_parameters
elif [ "$submodules" != "none" ]; then
  submodules=$(echo $submodules | jq -r '(.[])')
  for submodule in $submodules; do
    git submodule update --init $depthflag $submodule_parameters $submodule
  done
fi

if [ "$disable_git_lfs" != "true" ]; then
  git submodule foreach "git lfs fetch && git lfs checkout"
fi

for branch in $fetch; do
  git fetch origin $branch
  git branch $branch FETCH_HEAD
done

#If ref is not the last commit take the last commit
if [ "$ref" == "HEAD" ]; then
  return_ref=$(git rev-parse HEAD)
else
  return_ref=$ref
fi

# Store committer email in .git/committer. Can be used to send email to last committer on failed build
# Using https://github.com/mdomke/concourse-email-resource for example
git --no-pager log -1 --pretty=format:"%ae" > .git/committer

# Store git-resource returned version ref .git/ref. Useful to know concourse
# pulled ref in following tasks and resources.
echo "${return_ref}" > .git/ref

# Store short ref with templating. Useful to build Docker images with
# a custom tag
echo "${return_ref}" | cut -c1-7 | awk "{ printf \"${short_ref_format}\", \$1 }" > .git/short_ref

# Store commit message in .git/commit_message. Can be used to inform about
# the content of a successfull build.
# Using https://github.com/cloudfoundry-community/slack-notification-resource
# for example
git log -1 --format=format:%B > .git/commit_message

#Fetch all metadata for this commit. See function in commons.sh
metadata=$(git_metadata)

#Possibility to remove all tags
if [ "$clean_tags" == "true" ]; then #Currently not taken into account
  git tag | xargs git tag -d
fi

#Log and return the output in proper format to stdout
echo "in-output: "$(jq -n "{
  version: {ref: $(echo $return_ref | jq -R .)},
  metadata: $metadata
}")

jq -n "{
  version: {ref: $(echo $return_ref | jq -R .)},
  metadata: $metadata
}" >&3
