#!/bin/bash
# vim: set ft=sh

#The out-script updates the pr state to either failed or successful based on output from the concourse job.
set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/git-resource-request.XXXXXX)

cat > $payload <&0

echo "payload: " $payload

load_pubkey $payload
configure_https_tunnel $payload
configure_git_ssl_verification $payload
configure_credentials $payload

concourse_url=$(jq -r '.source.concourse_url // ""' < $payload)
uri=$(jq -r '.source.uri // ""' < $payload)
git_config_payload=$(jq -r '.source.git_config // []' < $payload)
build_state=$(jq -r '.params.state // ""' < $payload)
build_path=$(jq -r '.params.build_path // ""' < $payload)
bitbucket_key=$(jq -r '.source.bitbucket_key // ""' < $payload)
bitbucket_secret=$(jq -r '.source.bitbucket_secret // ""' < $payload)
bitbucket_host=$(jq -r '.source.bitbucket_host // ""' < $payload)
bitbucket_api_version=$(jq -r '.source.bitbucket_api_version // ""' < $payload)
bitbucket_team_name=$(jq -r '.source.bitbucket_team_name // ""' < $payload)
bitbucket_repo_name=$(jq -r '.source.bitbucket_repo_name // ""' < $payload)

#Update pr status in bitbucket
#cd to the place where the repo is stored by the in-script
cd $source
cd $build_path

#Fetch the reference that is used to update bitbucket and the metadata for output in concourse UI
current_ref=$(git rev-parse HEAD)
metadata=$(git_metadata)

#Get access token
ACCESS_TOKEN=`curl -X POST -u "${bitbucket_key}:${bitbucket_secret}" https://bitbucket.org/site/oauth2/access_token \
-d grant_type=client_credentials -k | jq '.access_token'`

#Post status to bitbucket including state, build key and url of the building pipeline
BUILD_URL="${concourse_url}/teams/${BUILD_TEAM_NAME}/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"

#Checks if the status is succesful or failed or still in progress.
update_state=""#Might not be needed if the job params are specified as bitbucket upda
if [ $build_state == "success" ]; then
    update_state="SUCCESSFUL"
elif [ $build_state == "failed" ]; then
    update_state="FAILED"
elif [ $build_state == "inprogress" ]; then
    update_state="INPROGRESS"
else
  echo "No status set" >&2
  cat $payload >&2
  exit 1
fi

BUILD_STATUS='{"state":"'${update_state}'","key":"concourse-'${BUILD_JOB_NAME}'", "url":"'${BUILD_URL}'"}'
BITBUCKET_BUILD_URL="${bitbucket_host}/${bitbucket_api_version}/repositories/${bitbucket_team_name}/${bitbucket_repo_name}/commit/${current_ref}/statuses/build"

curl -X POST ${BITBUCKET_BUILD_URL} \
--header "Content-Type: application/json" \
--header "Authorization: Bearer ${ACCESS_TOKEN}" \
--data "${BUILD_STATUS}" \
-k

jq -n "{
  version: {ref: $(echo $current_ref | jq -R .)},
  metadata: $metadata
}" >&3
